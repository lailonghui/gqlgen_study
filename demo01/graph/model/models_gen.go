// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AgendaItem interface {
	IsAgendaItem()
}

// 授权码
type AuthPayload struct {
	User  *User  `json:"user"`
	Token string `json:"token"`
}

// 数据页数
type DataPage struct {
	// 单个数据页中一次性返回的数据量
	Num *int `json:"num"`
	// 数据页码
	Page *int `json:"page"`
}

// 数据排序
type DataSort struct {
	Sort   *SortDirection      `json:"sort"`
	SortBy *SortablePhotoField `json:"sortBy"`
}

// 日期区间
type DateRange struct {
	Start time.Time  `json:"start"`
	End   *time.Time `json:"end"`
}

// 友情信息
type Friendship struct {
	Friends    []*User   `json:"friends"`
	HowLong    int       `json:"howLong"`
	WhereWeMet *Location `json:"whereWeMet"`
}

// 位置信息
type Location struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

// 照片
type Photo struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	URL         string        `json:"url"`
	Description *string       `json:"description"`
	Created     time.Time     `json:"created"`
	Category    PhotoCategory `json:"category"`
	PostedBy    *User         `json:"postedBy"`
	TaggedUsers []*User       `json:"taggedUsers"`
}

// 照片过滤输入
type PhotoFilter struct {
	Category      *PhotoCategory `json:"category"`
	CreateBetween *DateRange     `json:"createBetween"`
	TaggedUsers   []string       `json:"taggedUsers"`
	SearchText    *string        `json:"searchText"`
}

type PostPhotoInput struct {
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	Category    *PhotoCategory `json:"category"`
}

type StudyGroup struct {
	Name         string    `json:"name"`
	Start        time.Time `json:"start"`
	End          time.Time `json:"end"`
	Participants []*User   `json:"participants"`
	Topic        string    `json:"topic"`
}

func (StudyGroup) IsAgendaItem() {}

type User struct {
	GithubLogin  string        `json:"githubLogin"`
	Name         *string       `json:"name"`
	Avatar       *string       `json:"avatar"`
	PostedPhotos []*Photo      `json:"postedPhotos"`
	InPhotos     []*Photo      `json:"inPhotos"`
	Friends      []*Friendship `json:"friends"`
}

type Workout struct {
	// 议程名称
	Name string `json:"name"`
	// 开始时间
	Start time.Time `json:"start"`
	// 结束时间
	End  time.Time `json:"end"`
	Reps int       `json:"reps"`
}

func (Workout) IsAgendaItem() {}

// 照片类别枚举
type PhotoCategory string

const (
	// 自拍
	PhotoCategorySelfie PhotoCategory = "SELFIE"
	// 肖像
	PhotoCategoryPortrait PhotoCategory = "PORTRAIT"
	// 活动
	PhotoCategoryAction PhotoCategory = "ACTION"
	// 风景画
	PhotoCategoryLandscape PhotoCategory = "LANDSCAPE"
	// 绘画的
	PhotoCategoryGraphic PhotoCategory = "GRAPHIC"
)

var AllPhotoCategory = []PhotoCategory{
	PhotoCategorySelfie,
	PhotoCategoryPortrait,
	PhotoCategoryAction,
	PhotoCategoryLandscape,
	PhotoCategoryGraphic,
}

func (e PhotoCategory) IsValid() bool {
	switch e {
	case PhotoCategorySelfie, PhotoCategoryPortrait, PhotoCategoryAction, PhotoCategoryLandscape, PhotoCategoryGraphic:
		return true
	}
	return false
}

func (e PhotoCategory) String() string {
	return string(e)
}

func (e *PhotoCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhotoCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhotoCategory", str)
	}
	return nil
}

func (e PhotoCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 排序字段枚举
type SortDirection string

const (
	// 递增
	SortDirectionAscending SortDirection = "ASCENDING"
	// 递减
	SortDirectionDescending SortDirection = "DESCENDING"
)

var AllSortDirection = []SortDirection{
	SortDirectionAscending,
	SortDirectionDescending,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAscending, SortDirectionDescending:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 照片可排序字段
type SortablePhotoField string

const (
	SortablePhotoFieldName        SortablePhotoField = "name"
	SortablePhotoFieldDescription SortablePhotoField = "description"
	SortablePhotoFieldCategory    SortablePhotoField = "category"
	SortablePhotoFieldCreated     SortablePhotoField = "created"
)

var AllSortablePhotoField = []SortablePhotoField{
	SortablePhotoFieldName,
	SortablePhotoFieldDescription,
	SortablePhotoFieldCategory,
	SortablePhotoFieldCreated,
}

func (e SortablePhotoField) IsValid() bool {
	switch e {
	case SortablePhotoFieldName, SortablePhotoFieldDescription, SortablePhotoFieldCategory, SortablePhotoFieldCreated:
		return true
	}
	return false
}

func (e SortablePhotoField) String() string {
	return string(e)
}

func (e *SortablePhotoField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortablePhotoField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortablePhotoField", str)
	}
	return nil
}

func (e SortablePhotoField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
