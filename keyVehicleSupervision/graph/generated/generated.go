// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"lai.com/gqlgen_study/keyVehicleSupervision/graph/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	BusinessScopeInfo struct {
		BusinessScope func(childComplexity int) int
		Number        func(childComplexity int) int
	}

	DistrictCount struct {
		BusinessScopeInfoList func(childComplexity int) int
		DistrictName          func(childComplexity int) int
	}

	DriverIdentity struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreateAt                      func(childComplexity int) int
		CreateBy                      func(childComplexity int) int
		DeleteAt                      func(childComplexity int) int
		DeleteBy                      func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		IsDelete                      func(childComplexity int) int
		LaborContract                 func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdateAt                      func(childComplexity int) int
		UpdateBy                      func(childComplexity int) int
	}

	DriverInfo struct {
		CheckAt        func(childComplexity int) int
		CheckBy        func(childComplexity int) int
		ContactAddress func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		DepartmentID   func(childComplexity int) int
		DriverID       func(childComplexity int) int
		DriverIdentity func(childComplexity int) int
		DriverName     func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		FilesNumber    func(childComplexity int) int
		InputAt        func(childComplexity int) int
		InputBy        func(childComplexity int) int
		IsBlack        func(childComplexity int) int
		IsCheckData    func(childComplexity int) int
		IsCheckSms     func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		IsInput        func(childComplexity int) int
		IsManualInput  func(childComplexity int) int
		IsSubmit       func(childComplexity int) int
		MailingAddress func(childComplexity int) int
		RemarkIn       func(childComplexity int) int
		Remarks        func(childComplexity int) int
		Sex            func(childComplexity int) int
		SubmitAt       func(childComplexity int) int
		SubmitBy       func(childComplexity int) int
		SubmitContent  func(childComplexity int) int
		Telephone      func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
		UpdateTimeIn   func(childComplexity int) int
	}

	Mutation struct {
		CreateDriverInfo           func(childComplexity int, req model.NewDriverInfo) int
		CreateVehicleDriverBinding func(childComplexity int, req model.NewVehicleDriverBinding) int
		CreateVehicleInfo          func(childComplexity int, req model.NewVehicleInfo) int
		DeleteDriverInfo           func(childComplexity int, req model.NewDriverInfo) int
		DeleteVehicleDriverBinding func(childComplexity int, req model.NewVehicleDriverBinding) int
		DeleteVehicleInfo          func(childComplexity int, req model.NewVehicleInfo) int
		UpdateDriverInfo           func(childComplexity int, req model.NewDriverInfo) int
		UpdateVehicleDriverBinding func(childComplexity int, req model.NewVehicleDriverBinding) int
		UpdateVehicleInfo          func(childComplexity int, req model.NewVehicleInfo) int
	}

	Query struct {
		GetDistrictDriverList   func(childComplexity int, paging *model.DataPage, sorting *model.SortDirection) int
		GetDistrictVehicleList  func(childComplexity int, paging *model.DataPage, sorting *model.SortDirection) int
		GetDriverInfoList       func(childComplexity int, filter *model.DriverInfoFilter, paging *model.DataPage, sorting *model.DriverDataSort) int
		GetVehicleDriverBinding func(childComplexity int, filter *model.DriverInfoFilter, paging *model.DataPage, sorting *model.DriverDataSort) int
		GetVehicleInfoList      func(childComplexity int, filter *model.VehicleInfoFilter, paging *model.DataPage, sorting *model.VehicleDataSort) int
	}

	VehicleDriverBinding struct {
		CreateAt               func(childComplexity int) int
		CreateBy               func(childComplexity int) int
		DeleteAt               func(childComplexity int) int
		DeleteBy               func(childComplexity int) int
		DriverID               func(childComplexity int) int
		DriverName             func(childComplexity int) int
		IsBinding              func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		LeaseContract          func(childComplexity int) int
		LicensePlateColor      func(childComplexity int) int
		LicensePlateNumber     func(childComplexity int) int
		LicensePlateType       func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdateAt               func(childComplexity int) int
		UpdateBy               func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleInfo struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		District                    func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		IsActive                    func(childComplexity int) int
		IsApplyInstallTerminal      func(childComplexity int) int
		IsComplete                  func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsImport                    func(childComplexity int) int
		IsInput                     func(childComplexity int) int
		IsUploadProvince            func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleMaintenances         func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleMaintenance struct {
		MaintenanceDate       func(childComplexity int) int
		MaintenanceKilometers func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateVehicleInfo(ctx context.Context, req model.NewVehicleInfo) (*model.VehicleInfo, error)
	UpdateVehicleInfo(ctx context.Context, req model.NewVehicleInfo) (*model.VehicleInfo, error)
	DeleteVehicleInfo(ctx context.Context, req model.NewVehicleInfo) (*model.VehicleInfo, error)
	CreateDriverInfo(ctx context.Context, req model.NewDriverInfo) (*model.DriverInfo, error)
	UpdateDriverInfo(ctx context.Context, req model.NewDriverInfo) (*model.DriverInfo, error)
	DeleteDriverInfo(ctx context.Context, req model.NewDriverInfo) (*model.DriverInfo, error)
	CreateVehicleDriverBinding(ctx context.Context, req model.NewVehicleDriverBinding) (*model.VehicleDriverBinding, error)
	UpdateVehicleDriverBinding(ctx context.Context, req model.NewVehicleDriverBinding) (*model.VehicleDriverBinding, error)
	DeleteVehicleDriverBinding(ctx context.Context, req model.NewVehicleDriverBinding) (*model.VehicleDriverBinding, error)
}
type QueryResolver interface {
	GetDistrictVehicleList(ctx context.Context, paging *model.DataPage, sorting *model.SortDirection) ([]*model.DistrictCount, error)
	GetVehicleInfoList(ctx context.Context, filter *model.VehicleInfoFilter, paging *model.DataPage, sorting *model.VehicleDataSort) ([]*model.VehicleInfo, error)
	GetDistrictDriverList(ctx context.Context, paging *model.DataPage, sorting *model.SortDirection) ([]*model.DistrictCount, error)
	GetDriverInfoList(ctx context.Context, filter *model.DriverInfoFilter, paging *model.DataPage, sorting *model.DriverDataSort) ([]*model.DriverInfo, error)
	GetVehicleDriverBinding(ctx context.Context, filter *model.DriverInfoFilter, paging *model.DataPage, sorting *model.DriverDataSort) ([]*model.VehicleDriverBinding, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "BusinessScopeInfo.business_scope":
		if e.complexity.BusinessScopeInfo.BusinessScope == nil {
			break
		}

		return e.complexity.BusinessScopeInfo.BusinessScope(childComplexity), true

	case "BusinessScopeInfo.number":
		if e.complexity.BusinessScopeInfo.Number == nil {
			break
		}

		return e.complexity.BusinessScopeInfo.Number(childComplexity), true

	case "DistrictCount.business_scope_info_list":
		if e.complexity.DistrictCount.BusinessScopeInfoList == nil {
			break
		}

		return e.complexity.DistrictCount.BusinessScopeInfoList(childComplexity), true

	case "DistrictCount.district_name":
		if e.complexity.DistrictCount.DistrictName == nil {
			break
		}

		return e.complexity.DistrictCount.DistrictName(childComplexity), true

	case "DriverIdentity.accumulatived_points":
		if e.complexity.DriverIdentity.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentity.AccumulativedPoints(childComplexity), true

	case "DriverIdentity.annual_review_date":
		if e.complexity.DriverIdentity.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentity.AnnualReviewDate(childComplexity), true

	case "DriverIdentity.create_at":
		if e.complexity.DriverIdentity.CreateAt == nil {
			break
		}

		return e.complexity.DriverIdentity.CreateAt(childComplexity), true

	case "DriverIdentity.create_by":
		if e.complexity.DriverIdentity.CreateBy == nil {
			break
		}

		return e.complexity.DriverIdentity.CreateBy(childComplexity), true

	case "DriverIdentity.delete_at":
		if e.complexity.DriverIdentity.DeleteAt == nil {
			break
		}

		return e.complexity.DriverIdentity.DeleteAt(childComplexity), true

	case "DriverIdentity.delete_by":
		if e.complexity.DriverIdentity.DeleteBy == nil {
			break
		}

		return e.complexity.DriverIdentity.DeleteBy(childComplexity), true

	case "DriverIdentity.driver_holding_id_photo":
		if e.complexity.DriverIdentity.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverHoldingIDPhoto(childComplexity), true

	case "DriverIdentity.driver_license_city_id":
		if e.complexity.DriverIdentity.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseCityID(childComplexity), true

	case "DriverIdentity.driver_license_district_id":
		if e.complexity.DriverIdentity.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseDistrictID(childComplexity), true

	case "DriverIdentity.driver_license_issue_date":
		if e.complexity.DriverIdentity.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseIssueDate(childComplexity), true

	case "DriverIdentity.driver_license_issuing_authority":
		if e.complexity.DriverIdentity.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseIssuingAuthority(childComplexity), true

	case "DriverIdentity.driver_license_pic":
		if e.complexity.DriverIdentity.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicensePic(childComplexity), true

	case "DriverIdentity.driver_license_province_id":
		if e.complexity.DriverIdentity.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseProvinceID(childComplexity), true

	case "DriverIdentity.driver_license_status":
		if e.complexity.DriverIdentity.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseStatus(childComplexity), true

	case "DriverIdentity.driver_photo":
		if e.complexity.DriverIdentity.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverPhoto(childComplexity), true

	case "DriverIdentity.driver_signature":
		if e.complexity.DriverIdentity.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverSignature(childComplexity), true

	case "DriverIdentity.id_card_address":
		if e.complexity.DriverIdentity.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardAddress(childComplexity), true

	case "DriverIdentity.id_card_back_pic":
		if e.complexity.DriverIdentity.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardBackPic(childComplexity), true

	case "DriverIdentity.id_card_birthday":
		if e.complexity.DriverIdentity.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardBirthday(childComplexity), true

	case "DriverIdentity.id_card_end_date":
		if e.complexity.DriverIdentity.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardEndDate(childComplexity), true

	case "DriverIdentity.id_card_front_pic":
		if e.complexity.DriverIdentity.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardFrontPic(childComplexity), true

	case "DriverIdentity.id_card_nation":
		if e.complexity.DriverIdentity.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardNation(childComplexity), true

	case "DriverIdentity.id_card_num":
		if e.complexity.DriverIdentity.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardNum(childComplexity), true

	case "DriverIdentity.id_card_sign_government":
		if e.complexity.DriverIdentity.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardSignGovernment(childComplexity), true

	case "DriverIdentity.id_card_start_date":
		if e.complexity.DriverIdentity.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardStartDate(childComplexity), true

	case "DriverIdentity.identity_id":
		if e.complexity.DriverIdentity.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentity.IdentityID(childComplexity), true

	case "DriverIdentity.is_delete":
		if e.complexity.DriverIdentity.IsDelete == nil {
			break
		}

		return e.complexity.DriverIdentity.IsDelete(childComplexity), true

	case "DriverIdentity.labor_contract":
		if e.complexity.DriverIdentity.LaborContract == nil {
			break
		}

		return e.complexity.DriverIdentity.LaborContract(childComplexity), true

	case "DriverIdentity.occupational_expire_date":
		if e.complexity.DriverIdentity.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalExpireDate(childComplexity), true

	case "DriverIdentity.occupational_issuing_authority":
		if e.complexity.DriverIdentity.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalIssuingAuthority(childComplexity), true

	case "DriverIdentity.occupational_number":
		if e.complexity.DriverIdentity.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalNumber(childComplexity), true

	case "DriverIdentity.quasi_driving_models":
		if e.complexity.DriverIdentity.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentity.QuasiDrivingModels(childComplexity), true

	case "DriverIdentity.renewal_date":
		if e.complexity.DriverIdentity.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentity.RenewalDate(childComplexity), true

	case "DriverIdentity.sorting_date":
		if e.complexity.DriverIdentity.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentity.SortingDate(childComplexity), true

	case "DriverIdentity.update_at":
		if e.complexity.DriverIdentity.UpdateAt == nil {
			break
		}

		return e.complexity.DriverIdentity.UpdateAt(childComplexity), true

	case "DriverIdentity.update_by":
		if e.complexity.DriverIdentity.UpdateBy == nil {
			break
		}

		return e.complexity.DriverIdentity.UpdateBy(childComplexity), true

	case "DriverInfo.check_at":
		if e.complexity.DriverInfo.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfo.CheckAt(childComplexity), true

	case "DriverInfo.check_by":
		if e.complexity.DriverInfo.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfo.CheckBy(childComplexity), true

	case "DriverInfo.contact_address":
		if e.complexity.DriverInfo.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfo.ContactAddress(childComplexity), true

	case "DriverInfo.create_at":
		if e.complexity.DriverInfo.CreateAt == nil {
			break
		}

		return e.complexity.DriverInfo.CreateAt(childComplexity), true

	case "DriverInfo.create_by":
		if e.complexity.DriverInfo.CreateBy == nil {
			break
		}

		return e.complexity.DriverInfo.CreateBy(childComplexity), true

	case "DriverInfo.delete_at":
		if e.complexity.DriverInfo.DeleteAt == nil {
			break
		}

		return e.complexity.DriverInfo.DeleteAt(childComplexity), true

	case "DriverInfo.delete_by":
		if e.complexity.DriverInfo.DeleteBy == nil {
			break
		}

		return e.complexity.DriverInfo.DeleteBy(childComplexity), true

	case "DriverInfo.department_id":
		if e.complexity.DriverInfo.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfo.DepartmentID(childComplexity), true

	case "DriverInfo.driver_id":
		if e.complexity.DriverInfo.DriverID == nil {
			break
		}

		return e.complexity.DriverInfo.DriverID(childComplexity), true

	case "DriverInfo.driver_identity":
		if e.complexity.DriverInfo.DriverIdentity == nil {
			break
		}

		return e.complexity.DriverInfo.DriverIdentity(childComplexity), true

	case "DriverInfo.driver_name":
		if e.complexity.DriverInfo.DriverName == nil {
			break
		}

		return e.complexity.DriverInfo.DriverName(childComplexity), true

	case "DriverInfo.enterprise_id":
		if e.complexity.DriverInfo.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfo.EnterpriseID(childComplexity), true

	case "DriverInfo.files_number":
		if e.complexity.DriverInfo.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfo.FilesNumber(childComplexity), true

	case "DriverInfo.input_at":
		if e.complexity.DriverInfo.InputAt == nil {
			break
		}

		return e.complexity.DriverInfo.InputAt(childComplexity), true

	case "DriverInfo.input_by":
		if e.complexity.DriverInfo.InputBy == nil {
			break
		}

		return e.complexity.DriverInfo.InputBy(childComplexity), true

	case "DriverInfo.is_black":
		if e.complexity.DriverInfo.IsBlack == nil {
			break
		}

		return e.complexity.DriverInfo.IsBlack(childComplexity), true

	case "DriverInfo.is_check_data":
		if e.complexity.DriverInfo.IsCheckData == nil {
			break
		}

		return e.complexity.DriverInfo.IsCheckData(childComplexity), true

	case "DriverInfo.is_check_sms":
		if e.complexity.DriverInfo.IsCheckSms == nil {
			break
		}

		return e.complexity.DriverInfo.IsCheckSms(childComplexity), true

	case "DriverInfo.is_delete":
		if e.complexity.DriverInfo.IsDelete == nil {
			break
		}

		return e.complexity.DriverInfo.IsDelete(childComplexity), true

	case "DriverInfo.is_input":
		if e.complexity.DriverInfo.IsInput == nil {
			break
		}

		return e.complexity.DriverInfo.IsInput(childComplexity), true

	case "DriverInfo.is_manual_input":
		if e.complexity.DriverInfo.IsManualInput == nil {
			break
		}

		return e.complexity.DriverInfo.IsManualInput(childComplexity), true

	case "DriverInfo.is_submit":
		if e.complexity.DriverInfo.IsSubmit == nil {
			break
		}

		return e.complexity.DriverInfo.IsSubmit(childComplexity), true

	case "DriverInfo.mailing_address":
		if e.complexity.DriverInfo.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfo.MailingAddress(childComplexity), true

	case "DriverInfo.remark_in":
		if e.complexity.DriverInfo.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfo.RemarkIn(childComplexity), true

	case "DriverInfo.remarks":
		if e.complexity.DriverInfo.Remarks == nil {
			break
		}

		return e.complexity.DriverInfo.Remarks(childComplexity), true

	case "DriverInfo.sex":
		if e.complexity.DriverInfo.Sex == nil {
			break
		}

		return e.complexity.DriverInfo.Sex(childComplexity), true

	case "DriverInfo.submit_at":
		if e.complexity.DriverInfo.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitAt(childComplexity), true

	case "DriverInfo.submit_by":
		if e.complexity.DriverInfo.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitBy(childComplexity), true

	case "DriverInfo.submit_content":
		if e.complexity.DriverInfo.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitContent(childComplexity), true

	case "DriverInfo.telephone":
		if e.complexity.DriverInfo.Telephone == nil {
			break
		}

		return e.complexity.DriverInfo.Telephone(childComplexity), true

	case "DriverInfo.update_at":
		if e.complexity.DriverInfo.UpdateAt == nil {
			break
		}

		return e.complexity.DriverInfo.UpdateAt(childComplexity), true

	case "DriverInfo.update_by":
		if e.complexity.DriverInfo.UpdateBy == nil {
			break
		}

		return e.complexity.DriverInfo.UpdateBy(childComplexity), true

	case "DriverInfo.update_time_in":
		if e.complexity.DriverInfo.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfo.UpdateTimeIn(childComplexity), true

	case "Mutation.createDriverInfo":
		if e.complexity.Mutation.CreateDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_createDriverInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDriverInfo(childComplexity, args["req"].(model.NewDriverInfo)), true

	case "Mutation.createVehicleDriverBinding":
		if e.complexity.Mutation.CreateVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_createVehicleDriverBinding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVehicleDriverBinding(childComplexity, args["req"].(model.NewVehicleDriverBinding)), true

	case "Mutation.createVehicleInfo":
		if e.complexity.Mutation.CreateVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_createVehicleInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVehicleInfo(childComplexity, args["req"].(model.NewVehicleInfo)), true

	case "Mutation.deleteDriverInfo":
		if e.complexity.Mutation.DeleteDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDriverInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfo(childComplexity, args["req"].(model.NewDriverInfo)), true

	case "Mutation.deleteVehicleDriverBinding":
		if e.complexity.Mutation.DeleteVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVehicleDriverBinding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDriverBinding(childComplexity, args["req"].(model.NewVehicleDriverBinding)), true

	case "Mutation.deleteVehicleInfo":
		if e.complexity.Mutation.DeleteVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVehicleInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfo(childComplexity, args["req"].(model.NewVehicleInfo)), true

	case "Mutation.updateDriverInfo":
		if e.complexity.Mutation.UpdateDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateDriverInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfo(childComplexity, args["req"].(model.NewDriverInfo)), true

	case "Mutation.updateVehicleDriverBinding":
		if e.complexity.Mutation.UpdateVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_updateVehicleDriverBinding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDriverBinding(childComplexity, args["req"].(model.NewVehicleDriverBinding)), true

	case "Mutation.updateVehicleInfo":
		if e.complexity.Mutation.UpdateVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateVehicleInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfo(childComplexity, args["req"].(model.NewVehicleInfo)), true

	case "Query.getDistrictDriverList":
		if e.complexity.Query.GetDistrictDriverList == nil {
			break
		}

		args, err := ec.field_Query_getDistrictDriverList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDistrictDriverList(childComplexity, args["paging"].(*model.DataPage), args["sorting"].(*model.SortDirection)), true

	case "Query.getDistrictVehicleList":
		if e.complexity.Query.GetDistrictVehicleList == nil {
			break
		}

		args, err := ec.field_Query_getDistrictVehicleList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDistrictVehicleList(childComplexity, args["paging"].(*model.DataPage), args["sorting"].(*model.SortDirection)), true

	case "Query.getDriverInfoList":
		if e.complexity.Query.GetDriverInfoList == nil {
			break
		}

		args, err := ec.field_Query_getDriverInfoList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDriverInfoList(childComplexity, args["filter"].(*model.DriverInfoFilter), args["paging"].(*model.DataPage), args["sorting"].(*model.DriverDataSort)), true

	case "Query.getVehicleDriverBinding":
		if e.complexity.Query.GetVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Query_getVehicleDriverBinding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVehicleDriverBinding(childComplexity, args["filter"].(*model.DriverInfoFilter), args["paging"].(*model.DataPage), args["sorting"].(*model.DriverDataSort)), true

	case "Query.getVehicleInfoList":
		if e.complexity.Query.GetVehicleInfoList == nil {
			break
		}

		args, err := ec.field_Query_getVehicleInfoList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVehicleInfoList(childComplexity, args["filter"].(*model.VehicleInfoFilter), args["paging"].(*model.DataPage), args["sorting"].(*model.VehicleDataSort)), true

	case "VehicleDriverBinding.create_at":
		if e.complexity.VehicleDriverBinding.CreateAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.CreateAt(childComplexity), true

	case "VehicleDriverBinding.create_by":
		if e.complexity.VehicleDriverBinding.CreateBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.CreateBy(childComplexity), true

	case "VehicleDriverBinding.delete_at":
		if e.complexity.VehicleDriverBinding.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DeleteAt(childComplexity), true

	case "VehicleDriverBinding.delete_by":
		if e.complexity.VehicleDriverBinding.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DeleteBy(childComplexity), true

	case "VehicleDriverBinding.driver_id":
		if e.complexity.VehicleDriverBinding.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DriverID(childComplexity), true

	case "VehicleDriverBinding.driver_name":
		if e.complexity.VehicleDriverBinding.DriverName == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DriverName(childComplexity), true

	case "VehicleDriverBinding.is_binding":
		if e.complexity.VehicleDriverBinding.IsBinding == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.IsBinding(childComplexity), true

	case "VehicleDriverBinding.is_delete":
		if e.complexity.VehicleDriverBinding.IsDelete == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.IsDelete(childComplexity), true

	case "VehicleDriverBinding.lease_contract":
		if e.complexity.VehicleDriverBinding.LeaseContract == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.LeaseContract(childComplexity), true

	case "VehicleDriverBinding.license_plate_color":
		if e.complexity.VehicleDriverBinding.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.LicensePlateColor(childComplexity), true

	case "VehicleDriverBinding.license_plate_number":
		if e.complexity.VehicleDriverBinding.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.LicensePlateNumber(childComplexity), true

	case "VehicleDriverBinding.license_plate_type":
		if e.complexity.VehicleDriverBinding.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.LicensePlateType(childComplexity), true

	case "VehicleDriverBinding.remarks":
		if e.complexity.VehicleDriverBinding.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.Remarks(childComplexity), true

	case "VehicleDriverBinding.update_at":
		if e.complexity.VehicleDriverBinding.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.UpdateAt(childComplexity), true

	case "VehicleDriverBinding.update_by":
		if e.complexity.VehicleDriverBinding.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.UpdateBy(childComplexity), true

	case "VehicleDriverBinding.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBinding.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.VehicleDriverBindingID(childComplexity), true

	case "VehicleDriverBinding.vehicle_id":
		if e.complexity.VehicleDriverBinding.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.VehicleID(childComplexity), true

	case "VehicleInfo.business_scope":
		if e.complexity.VehicleInfo.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfo.BusinessScope(childComplexity), true

	case "VehicleInfo.car_rental_price":
		if e.complexity.VehicleInfo.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfo.CarRentalPrice(childComplexity), true

	case "VehicleInfo.check_state":
		if e.complexity.VehicleInfo.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfo.CheckState(childComplexity), true

	case "VehicleInfo.create_at":
		if e.complexity.VehicleInfo.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfo.CreateAt(childComplexity), true

	case "VehicleInfo.create_by":
		if e.complexity.VehicleInfo.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfo.CreateBy(childComplexity), true

	case "VehicleInfo.delete_at":
		if e.complexity.VehicleInfo.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfo.DeleteAt(childComplexity), true

	case "VehicleInfo.delete_by":
		if e.complexity.VehicleInfo.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfo.DeleteBy(childComplexity), true

	case "VehicleInfo.department_id":
		if e.complexity.VehicleInfo.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfo.DepartmentID(childComplexity), true

	case "VehicleInfo.district":
		if e.complexity.VehicleInfo.District == nil {
			break
		}

		return e.complexity.VehicleInfo.District(childComplexity), true

	case "VehicleInfo.driving_licensee_pic":
		if e.complexity.VehicleInfo.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfo.DrivingLicenseePic(childComplexity), true

	case "VehicleInfo.enterprise_id":
		if e.complexity.VehicleInfo.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfo.EnterpriseID(childComplexity), true

	case "VehicleInfo.enterprise_name":
		if e.complexity.VehicleInfo.EnterpriseName == nil {
			break
		}

		return e.complexity.VehicleInfo.EnterpriseName(childComplexity), true

	case "VehicleInfo.heavy":
		if e.complexity.VehicleInfo.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfo.Heavy(childComplexity), true

	case "VehicleInfo.industry_category":
		if e.complexity.VehicleInfo.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfo.IndustryCategory(childComplexity), true

	case "VehicleInfo.inspection_date":
		if e.complexity.VehicleInfo.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfo.InspectionDate(childComplexity), true

	case "VehicleInfo.insurance_company":
		if e.complexity.VehicleInfo.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfo.InsuranceCompany(childComplexity), true

	case "VehicleInfo.insurance_date":
		if e.complexity.VehicleInfo.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfo.InsuranceDate(childComplexity), true

	case "VehicleInfo.is_active":
		if e.complexity.VehicleInfo.IsActive == nil {
			break
		}

		return e.complexity.VehicleInfo.IsActive(childComplexity), true

	case "VehicleInfo.is_apply_install_terminal":
		if e.complexity.VehicleInfo.IsApplyInstallTerminal == nil {
			break
		}

		return e.complexity.VehicleInfo.IsApplyInstallTerminal(childComplexity), true

	case "VehicleInfo.is_complete":
		if e.complexity.VehicleInfo.IsComplete == nil {
			break
		}

		return e.complexity.VehicleInfo.IsComplete(childComplexity), true

	case "VehicleInfo.is_delete":
		if e.complexity.VehicleInfo.IsDelete == nil {
			break
		}

		return e.complexity.VehicleInfo.IsDelete(childComplexity), true

	case "VehicleInfo.is_import":
		if e.complexity.VehicleInfo.IsImport == nil {
			break
		}

		return e.complexity.VehicleInfo.IsImport(childComplexity), true

	case "VehicleInfo.is_input":
		if e.complexity.VehicleInfo.IsInput == nil {
			break
		}

		return e.complexity.VehicleInfo.IsInput(childComplexity), true

	case "VehicleInfo.is_upload_province":
		if e.complexity.VehicleInfo.IsUploadProvince == nil {
			break
		}

		return e.complexity.VehicleInfo.IsUploadProvince(childComplexity), true

	case "VehicleInfo.license_plate_color":
		if e.complexity.VehicleInfo.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateColor(childComplexity), true

	case "VehicleInfo.license_plate_number":
		if e.complexity.VehicleInfo.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateNumber(childComplexity), true

	case "VehicleInfo.license_plate_type":
		if e.complexity.VehicleInfo.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateType(childComplexity), true

	case "VehicleInfo.operating_route":
		if e.complexity.VehicleInfo.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingRoute(childComplexity), true

	case "VehicleInfo.operating_state":
		if e.complexity.VehicleInfo.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingState(childComplexity), true

	case "VehicleInfo.operating_type":
		if e.complexity.VehicleInfo.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingType(childComplexity), true

	case "VehicleInfo.owner":
		if e.complexity.VehicleInfo.Owner == nil {
			break
		}

		return e.complexity.VehicleInfo.Owner(childComplexity), true

	case "VehicleInfo.quasi_driving_models":
		if e.complexity.VehicleInfo.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfo.QuasiDrivingModels(childComplexity), true

	case "VehicleInfo.record_at":
		if e.complexity.VehicleInfo.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfo.RecordAt(childComplexity), true

	case "VehicleInfo.record_by":
		if e.complexity.VehicleInfo.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfo.RecordBy(childComplexity), true

	case "VehicleInfo.remark_in":
		if e.complexity.VehicleInfo.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfo.RemarkIn(childComplexity), true

	case "VehicleInfo.remarks":
		if e.complexity.VehicleInfo.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfo.Remarks(childComplexity), true

	case "VehicleInfo.retirement_date":
		if e.complexity.VehicleInfo.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfo.RetirementDate(childComplexity), true

	case "VehicleInfo.road_transport_license_number":
		if e.complexity.VehicleInfo.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.RoadTransportLicenseNumber(childComplexity), true

	case "VehicleInfo.seats":
		if e.complexity.VehicleInfo.Seats == nil {
			break
		}

		return e.complexity.VehicleInfo.Seats(childComplexity), true

	case "VehicleInfo.terminal_id":
		if e.complexity.VehicleInfo.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfo.TerminalID(childComplexity), true

	case "VehicleInfo.update_at":
		if e.complexity.VehicleInfo.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfo.UpdateAt(childComplexity), true

	case "VehicleInfo.update_by":
		if e.complexity.VehicleInfo.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfo.UpdateBy(childComplexity), true

	case "VehicleInfo.update_time_in":
		if e.complexity.VehicleInfo.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfo.UpdateTimeIn(childComplexity), true

	case "VehicleInfo.use_nature":
		if e.complexity.VehicleInfo.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfo.UseNature(childComplexity), true

	case "VehicleInfo.vehicle_brand":
		if e.complexity.VehicleInfo.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleBrand(childComplexity), true

	case "VehicleInfo.vehicle_displacement":
		if e.complexity.VehicleInfo.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleDisplacement(childComplexity), true

	case "VehicleInfo.vehicle_id":
		if e.complexity.VehicleInfo.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleID(childComplexity), true

	case "VehicleInfo.vehicle_identification_number":
		if e.complexity.VehicleInfo.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleIdentificationNumber(childComplexity), true

	case "VehicleInfo.vehicle_maintenances":
		if e.complexity.VehicleInfo.VehicleMaintenances == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleMaintenances(childComplexity), true

	case "VehicleInfo.vehicle_manager":
		if e.complexity.VehicleInfo.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleManager(childComplexity), true

	case "VehicleInfo.vehicle_manager_id_card":
		if e.complexity.VehicleInfo.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleManagerIDCard(childComplexity), true

	case "VehicleInfo.vehicle_manager_phone":
		if e.complexity.VehicleInfo.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleManagerPhone(childComplexity), true

	case "VehicleInfo.vehicle_state":
		if e.complexity.VehicleInfo.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleState(childComplexity), true

	case "VehicleInfo.vehicle_type":
		if e.complexity.VehicleInfo.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleType(childComplexity), true

	case "VehicleMaintenance.maintenance_date":
		if e.complexity.VehicleMaintenance.MaintenanceDate == nil {
			break
		}

		return e.complexity.VehicleMaintenance.MaintenanceDate(childComplexity), true

	case "VehicleMaintenance.maintenance_kilometers":
		if e.complexity.VehicleMaintenance.MaintenanceKilometers == nil {
			break
		}

		return e.complexity.VehicleMaintenance.MaintenanceKilometers(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/driver.graphqls", Input: `"驾驶员信息"
type DriverInfo implements TimeModel{
    "驾驶员外部编码,由golang程序生成的xid，暴露到外部使用"
    driver_id: String!
    "所在企业id"
    enterprise_id: String
    "所在部门id"
    department_id: String
    "驾驶员身份验证信息"
    driver_identity: DriverIdentity
    "驾驶员姓名"
    driver_name: String
    "手机号码"
    telephone: String
    "性别"
    sex: Int!
    "档案编号(后6位)"
    files_number: String
    "联系地址"
    contact_address: String
    "邮寄地址"
    mailing_address: String
    "是否提交"
    is_submit: Boolean
    "提交内容"
    submit_content: String
    "提交时间"
    submit_at: Time
    "提交人"
    submit_by: String
    "是否手动录入"
    is_manual_input: Boolean
    "是否录入"
    is_input: Boolean
    "录入时间"
    input_at: Time
    "录入人"
    input_by: String
    "是否校验数据"
    is_check_data: Boolean
    "检验时间"
    check_at: Time
    "校验人"
    check_by: String
    "驾驶员信息同步内网反馈信息"
    remark_in: String
    "内网更新时间"
    update_time_in: Time
    "是否通过短信验证"
    is_check_sms: Boolean
    "是否黑名单"
    is_black: Boolean
    "创建时间"
    create_at: Time!
    "创建人"
    create_by: String!
    "修改时间"
    update_at: Time!
    "修改人"
    update_by: String!
    "删除时间"
    delete_at: Time
    "删除人"
    delete_by: String
    "是否删除"
    is_delete: Boolean
    "备注"
    remarks: String

}

"驾驶员身份验证信息"
type DriverIdentity implements TimeModel{
    "由golang程序生成的xid，暴露到外部使用"
    identity_id: String!
    "身份证号码"
    id_card_num: String
    "身份证出生日期"
    id_card_birthday: Time
    "身份证签发机关"
    id_card_sign_government: String
    "身份证民族"
    id_card_nation: String
    "身份证有效起始日期"
    id_card_start_date: Time
    "身份证有效截止日期"
    id_card_end_date: Time
    "身份证正面照，云存储地址"
    id_card_front_pic: String
    "身份证背面照，云存储地址"
    id_card_back_pic: String
    "身份证住址"
    id_card_address: String
    "驾驶员手持身份证照片,云储存系统返回的路径"
    driver_holding_id_photo: String
    "驾驶员的正面照,云储存系统返回的路径"
    driver_photo: String
    "驾驶员签名,云储存系统返回的路径"
    driver_signature: String
    "从业资格证号码"
    occupational_number: String
    "从业资格证有效期至"
    occupational_expire_date: Time
    "从业资格证发证机构"
    occupational_issuing_authority: String
    "劳动合同,云储存系统返回的完整劳动合同的图片路径"
    labor_contract: [String]
    "驾驶员驾驶证,云储存系统返回的路径"
    driver_license_pic: String
    "驾驶证发证机关"
    driver_license_issuing_authority: String
    "年审日期（六合一）"
    annual_review_date: Time
    "换证日期（六合一）"
    renewal_date: Time
    "累计积分（六合一）"
    accumulatived_points: Float
    "清分日期（六合一）"
    sorting_date: Time
    "准驾车型（六合一）"
    quasi_driving_models: Int
    "驾驶证发证所在地的省份ID"
    driver_license_province_id: String
    "驾驶证发证所在地的城市ID"
    driver_license_city_id: String
    "驾驶证发证所在地的区域ID"
    driver_license_district_id: String
    "驾驶证状态"
    driver_license_status: Int
    "驾驶证初次领证日期"
    driver_license_issue_date: Time
    "是否删除"
    is_delete: Boolean
    "创建时间"
    create_at: Time!
    "创建人"
    create_by: String!
    "修改时间"
    update_at: Time!
    "修改人"
    update_by: String!
    "删除时间"
    delete_at: Time
    "删除人"
    delete_by: String
}


"车辆驾驶员绑定表"
type VehicleDriverBinding implements TimeModel{
    "由golang程序生成的xid，暴露到外部使用"
    vehicle_driver_binding_id: String!
    "驾驶员id"
    driver_id: String
    "车辆id"
    vehicle_id: String
    "备注"
    remarks: String
    "租赁合同,,云储存系统返回的完整租赁合同的图片路径"
    lease_contract: [String]
    "车牌号"
    license_plate_number: String
    "车牌颜色"
    license_plate_color: Int
    "号牌种类"
    license_plate_type: Int
    "驾驶员姓名"
    driver_name: String
    "是否绑定"
    is_binding: Boolean
    "是否删除"
    is_delete: Boolean
    "创建时间"
    create_at: Time!
    "创建人"
    create_by: String!
    "修改时间"
    update_at: Time!
    "修改人"
    update_by: String!
    "删除时间"
    delete_at: Time
    "删除人"
    delete_by: String
}


"驾驶员信息的输入"
input NewDriverInfo {
    "驾驶员姓名"
    driver_name: String!
    "性别"
    sex: Int!
    "驾驶员身份验证信息ID"
    driver_identity_id: String!
    "身份证住址"
    id_card_address: String!
    "所在企业"
    enterprise_name: String!
    "所在部门"
    department_name: String!
    "手机号码"
    telephone: String
    "短信验证码"
    SMS_verification_code: String!
    "驾驶证发证所在地"
    driver_license_address: String!
    "档案编号(后6位)"
    file_number: String!
    "驾驶员身份证"
    id_card_pic: [Upload!]!
    "驾驶员驾驶证"
    driver_license: [Upload!]!
    "劳动合同"
    labor_contract: [Upload!]!
}

"车辆驾驶员绑定信息的输入"
input NewVehicleDriverBinding {
    "车牌号"
    license_plate_number: String
    "驾驶员姓名"
    driver_name: String
}

"驾驶员信息的输入过滤"
input DriverInfoFilter {
    "驾驶员姓名"
    driver_name: String
    "驾驶员身份验证信息ID"
    driver_identity_id: String
    "手机号码"
    telephone: String
    "企业名称"
    enterprise_name: String
    "所在县"
    district: String
}

"车辆驾驶员绑定信息的输入过滤"
input VehicleDriverBindingFilter {
    "车牌号"
    license_plate_number: String
    "经营范围"
    business_scope: Int
    "绑定状态"
    is_binding: Boolean
    "企业名称"
    enterprise_name: String
    "所在县"
    district: String
}

"车辆信息可排序字段"
enum SortableDriverField {
    "创建时间"
    created
    "驾驶员身份验证信息ID"
    driver_identity_id
}

"驾驶员信息数据排序"
input DriverDataSort {
    "排序方向"
    sort: SortDirection = DESCENDING
    "排序字段"
    sortBy: SortableDriverField = created
}
extend type Query {
    "查询县区管辖的经营范围的驾驶员数量"
    getDistrictDriverList(
        paging: DataPage
        sorting: SortDirection = DESCENDING
    ): [DistrictCount!]!
    "查询驾驶员信息"
    getDriverInfoList(
        filter: DriverInfoFilter,
        paging: DataPage
        sorting: DriverDataSort
    ): [DriverInfo!]!
    "查询车辆与驾驶员绑定关系数据"
    getVehicleDriverBinding(
        filter: DriverInfoFilter,
        paging: DataPage
        sorting: DriverDataSort
    ): [VehicleDriverBinding!]!
}

extend type Mutation {
    "创建驾驶员信息"
    createDriverInfo(req:NewDriverInfo!): DriverInfo!
    "修改驾驶员信息"
    updateDriverInfo(req:NewDriverInfo!): DriverInfo!
    "删除驾驶员信息"
    deleteDriverInfo(req:NewDriverInfo!): DriverInfo!
    "创建车辆与驾驶员绑定关系"
    createVehicleDriverBinding(req:NewVehicleDriverBinding!): VehicleDriverBinding!
    "编辑车辆与驾驶员绑定关系"
    updateVehicleDriverBinding(req:NewVehicleDriverBinding!): VehicleDriverBinding!
    "解绑车辆与驾驶员"
    deleteVehicleDriverBinding(req:NewVehicleDriverBinding!): VehicleDriverBinding!
}`, BuiltIn: false},
	{Name: "graph/graphqls/schema.graphqls", Input: `scalar Time
scalar Upload
"时间相关信息接口"
interface TimeModel {
    "创建时间"
    create_at: Time!
    "创建人"
    create_by: String!
    "修改时间"
    update_at: Time!
    "修改人"
    update_by: String!
    "删除时间"
    delete_at: Time
    "删除人"
    delete_by: String
}

"排序方向枚举"
enum SortDirection {
    "升序"
    ASCENDING
    "降序"
    DESCENDING
}

"日期区间 "
input DateRange {
    "开始时间"
    start: Time
    "结束时间"
    end: Time
}

"数据页数"
input DataPage {
    "单个数据页中一次性返回的数据量"
    num: Int = 10
    "数据页码"
    page: Int = 0
}

"经营范围的车辆或驾驶员数量"
type BusinessScopeInfo {
    "经营范围"
    business_scope: String
    "车辆数量"
    number: Int
}

"所在县区管辖的车辆或驾驶员统计信息"
type DistrictCount{
    "所在县区名称"
    district_name: String!
    "所在县区的经营范围的车辆或驾驶员的数量信息"
    business_scope_info_list:[BusinessScopeInfo!]!
}



#type Query {
#    "测试"
#    test: String!
#}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle.graphqls", Input: `

"车辆维保数据"
type VehicleMaintenance {
    "维保时间"
    maintenance_date: Time
    "维保公里数"
    maintenance_kilometers: Float
}

"车辆信息"
type VehicleInfo implements TimeModel{
    "车辆外部编码,由golang程序生成的xid，暴露到外部使用"
    vehicle_id: String!
    "车牌号"
    license_plate_number: String
    "车牌颜色"
    license_plate_color: Int
    "号牌种类"
    license_plate_type: Int
    "所在企业id"
    enterprise_id: String
    "企业名称"
    enterprise_name: String
    "所在县"
    district: String
    "所在部门id"
    department_id: String
    "车架号(后6位)"
    vehicle_identification_number: String
    "道路运输证号"
    road_transport_license_number: String
    "车辆类型"
    vehicle_type: Int
    "行业类别"
    industry_category: Int
    "吨位"
    heavy: Float
    "座位"
    seats: Int
    "营运类型"
    operating_type: Int
    "营运线路"
    operating_route: String
    "经营范围"
    business_scope: Int
    "机动车管理人"
    vehicle_manager: String
    "机动车管理人联系电话"
    vehicle_manager_phone: String
    "机动车管理人身份证"
    vehicle_manager_id_card: String
    "机动车所有人（六合一）"
    owner: String
    "检验日期（六合一）"
    inspection_date: Time
    "报废日期(六合一)"
    retirement_date: Time
    "使用性质（六合一）"
    use_nature: String
    "机动车状态"
    vehicle_state: Int
    "内网更新时间"
    update_time_in: Time
    "车辆信息同步内网反馈信息"
    remark_in: String
    "是否完成"
    is_complete: Boolean
    "行驶证照片,云储存系统返回的路径"
    driving_licensee_pic: String
    "是否激活"
    is_active: Boolean
    "是否录入完成"
    is_input: Boolean
    "租车标准价格"
    car_rental_price: Float
    "投保公司"
    insurance_company: Int
    "投保日期"
    insurance_date: Time
    "维保数据数组"
    vehicle_maintenances: [VehicleMaintenance]
    "汽车排量"
    vehicle_displacement: String
    "车辆品牌"
    vehicle_brand: Int
    "准驾车型"
    quasi_driving_models: Int
    "是否上传省厅"
    is_upload_province: Boolean
    "营运状态"
    operating_state: Int
    "终端ID"
    terminal_id: String
    "是否申请安装智能终端"
    is_apply_install_terminal: Boolean
    "校验状态"
    check_state: Int
    "是否导入"
    is_import: Boolean
    "登记时间"
    record_at: Time
    "登记人"
    record_by: String
    "是否删除"
    is_delete: Boolean
    "备注"
    remarks: String
    "创建时间"
    create_at: Time!
    "创建人"
    create_by: String!
    "修改时间"
    update_at: Time!
    "修改人"
    update_by: String!
    "删除时间"
    delete_at: Time
    "删除人"
    delete_by: String
}

"车辆信息可排序字段"
enum SortableVehicleField {
    "创建时间"
    created
    "车牌号"
    license_plate_number
    "汽车排量"
    vehicle_displacement
    "租车标准价格"
    car_rental_price
}

"车辆信息的输入过滤"
input VehicleInfoFilter {
    "车牌号"
    license_plate_number: String
    "经营范围"
    business_scope: Int
    "机动车状态"
    vehicle_state: Int
    "登记时间从"
    registerBetween: DateRange
    "车辆类型"
    vehicle_type: Int
    "检验日期（六合一）"
    inspection_date: Time
    "使用性质（六合一）"
    use_nature: String
    "企业名称"
    enterprise_name: String
    "所在县"
    district: String
}

"车辆信息数据排序"
input VehicleDataSort {
    "排序方向"
    sort: SortDirection = DESCENDING
    "排序字段"
    sortBy: SortableVehicleField = created
}

"车辆信息的输入"
input NewVehicleInfo {
    "车牌号"
    license_plate_number: String
    "车牌颜色"
    license_plate_color: Int
    "号牌种类"
    license_plate_type: Int
    "企业名称"
    enterprise_name: String
    "车辆类型"
    vehicle_type: Int
    "经营范围"
    business_scope: Int
    "车架号(后6位)"
    vehicle_identification_number: String
    "机动车状态"
    vehicle_state: Int
    "机动车所有人（六合一）"
    owner: String
    "检验日期（六合一）"
    inspection_date: Time
    "报废日期(六合一)"
    retirement_date: Time
    "使用性质（六合一）"
    use_nature: String
}


type Query {
    "查询县区管辖的经营范围的车辆数量"
    getDistrictVehicleList(
        paging: DataPage
        sorting: SortDirection = DESCENDING
    ): [DistrictCount!]!
    "查询车辆信息"
    getVehicleInfoList(
        filter: VehicleInfoFilter,
        paging: DataPage
        sorting: VehicleDataSort
    ): [VehicleInfo!]!

}

type Mutation {
    "创建车辆信息"
    createVehicleInfo(req:NewVehicleInfo!):VehicleInfo!
    "修改车辆信息"
    updateVehicleInfo(req:NewVehicleInfo!): VehicleInfo!
    "删除车辆信息"
    deleteVehicleInfo(req:NewVehicleInfo!): VehicleInfo!

}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createDriverInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewDriverInfo
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewDriverInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewDriverInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVehicleDriverBinding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVehicleDriverBinding
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewVehicleDriverBinding2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleDriverBinding(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVehicleInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVehicleInfo
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewVehicleInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDriverInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewDriverInfo
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewDriverInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewDriverInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVehicleDriverBinding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVehicleDriverBinding
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewVehicleDriverBinding2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleDriverBinding(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVehicleInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVehicleInfo
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewVehicleInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDriverInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewDriverInfo
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewDriverInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewDriverInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVehicleDriverBinding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVehicleDriverBinding
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewVehicleDriverBinding2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleDriverBinding(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVehicleInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewVehicleInfo
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNNewVehicleInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDistrictDriverList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataPage
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg0, err = ec.unmarshalODataPage2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDataPage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	var arg1 *model.SortDirection
	if tmp, ok := rawArgs["sorting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting"))
		arg1, err = ec.unmarshalOSortDirection2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorting"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getDistrictVehicleList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataPage
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg0, err = ec.unmarshalODataPage2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDataPage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	var arg1 *model.SortDirection
	if tmp, ok := rawArgs["sorting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting"))
		arg1, err = ec.unmarshalOSortDirection2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorting"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getDriverInfoList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalODriverInfoFilter2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfoFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.DataPage
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg1, err = ec.unmarshalODataPage2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDataPage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg1
	var arg2 *model.DriverDataSort
	if tmp, ok := rawArgs["sorting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting"))
		arg2, err = ec.unmarshalODriverDataSort2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverDataSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorting"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getVehicleDriverBinding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalODriverInfoFilter2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfoFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.DataPage
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg1, err = ec.unmarshalODataPage2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDataPage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg1
	var arg2 *model.DriverDataSort
	if tmp, ok := rawArgs["sorting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting"))
		arg2, err = ec.unmarshalODriverDataSort2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverDataSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorting"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getVehicleInfoList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVehicleInfoFilter2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfoFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.DataPage
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg1, err = ec.unmarshalODataPage2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDataPage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg1
	var arg2 *model.VehicleDataSort
	if tmp, ok := rawArgs["sorting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting"))
		arg2, err = ec.unmarshalOVehicleDataSort2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDataSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorting"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BusinessScopeInfo_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.BusinessScopeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessScopeInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessScopeInfo_number(ctx context.Context, field graphql.CollectedField, obj *model.BusinessScopeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessScopeInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictCount_district_name(ctx context.Context, field graphql.CollectedField, obj *model.DistrictCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictCount_business_scope_info_list(ctx context.Context, field graphql.CollectedField, obj *model.DistrictCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScopeInfoList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BusinessScopeInfo)
	fc.Result = res
	return ec.marshalNBusinessScopeInfo2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐBusinessScopeInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_driver_identity(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentity)
	fc.Result = res
	return ec.marshalODriverIdentity2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_submit(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_manual_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManualInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_check_data(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_check_sms(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_black(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVehicleInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVehicleInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVehicleInfo(rctx, args["req"].(model.NewVehicleInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNVehicleInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVehicleInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVehicleInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfo(rctx, args["req"].(model.NewVehicleInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNVehicleInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVehicleInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVehicleInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfo(rctx, args["req"].(model.NewVehicleInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNVehicleInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDriverInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDriverInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDriverInfo(rctx, args["req"].(model.NewDriverInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDriverInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDriverInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfo(rctx, args["req"].(model.NewDriverInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDriverInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDriverInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfo(rctx, args["req"].(model.NewDriverInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVehicleDriverBinding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVehicleDriverBinding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVehicleDriverBinding(rctx, args["req"].(model.NewVehicleDriverBinding))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVehicleDriverBinding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVehicleDriverBinding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDriverBinding(rctx, args["req"].(model.NewVehicleDriverBinding))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVehicleDriverBinding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVehicleDriverBinding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDriverBinding(rctx, args["req"].(model.NewVehicleDriverBinding))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDistrictVehicleList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDistrictVehicleList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDistrictVehicleList(rctx, args["paging"].(*model.DataPage), args["sorting"].(*model.SortDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DistrictCount)
	fc.Result = res
	return ec.marshalNDistrictCount2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDistrictCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVehicleInfoList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVehicleInfoList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVehicleInfoList(rctx, args["filter"].(*model.VehicleInfoFilter), args["paging"].(*model.DataPage), args["sorting"].(*model.VehicleDataSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNVehicleInfo2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDistrictDriverList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDistrictDriverList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDistrictDriverList(rctx, args["paging"].(*model.DataPage), args["sorting"].(*model.SortDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DistrictCount)
	fc.Result = res
	return ec.marshalNDistrictCount2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDistrictCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDriverInfoList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDriverInfoList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDriverInfoList(rctx, args["filter"].(*model.DriverInfoFilter), args["paging"].(*model.DataPage), args["sorting"].(*model.DriverDataSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVehicleDriverBinding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVehicleDriverBinding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVehicleDriverBinding(rctx, args["filter"].(*model.DriverInfoFilter), args["paging"].(*model.DataPage), args["sorting"].(*model.DriverDataSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_lease_contract(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaseContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_is_binding(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBinding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_district(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_complete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_active(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_input(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_maintenances(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleMaintenances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleMaintenance)
	fc.Result = res
	return ec.marshalOVehicleMaintenance2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleMaintenance(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_apply_install_terminal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApplyInstallTerminal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_import(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsImport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleInfo_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleMaintenance_maintenance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleMaintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleMaintenance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaintenanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleMaintenance_maintenance_kilometers(ctx context.Context, field graphql.CollectedField, obj *model.VehicleMaintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleMaintenance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaintenanceKilometers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDataPage(ctx context.Context, obj interface{}) (model.DataPage, error) {
	var it model.DataPage
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["num"]; !present {
		asMap["num"] = 10
	}

	for k, v := range asMap {
		switch k {
		case "num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("num"))
			it.Num, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateRange(ctx context.Context, obj interface{}) (model.DateRange, error) {
	var it model.DateRange
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "start":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
			it.Start, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end"))
			it.End, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverDataSort(ctx context.Context, obj interface{}) (model.DriverDataSort, error) {
	var it model.DriverDataSort
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["sort"]; !present {
		asMap["sort"] = "DESCENDING"
	}
	if _, present := asMap["sortBy"]; !present {
		asMap["sortBy"] = "created"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOSortDirection2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOSortableDriverField2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortableDriverField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverInfoFilter(ctx context.Context, obj interface{}) (model.DriverInfoFilter, error) {
	var it model.DriverInfoFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewDriverInfo(ctx context.Context, obj interface{}) (model.NewDriverInfo, error) {
	var it model.NewDriverInfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "SMS_verification_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SMS_verification_code"))
			it.SmsVerificationCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_address"))
			it.DriverLicenseAddress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_number"))
			it.FileNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_pic"))
			it.IDCardPic, err = ec.unmarshalNUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalNUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalNUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewVehicleDriverBinding(ctx context.Context, obj interface{}) (model.NewVehicleDriverBinding, error) {
	var it model.NewVehicleDriverBinding
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewVehicleInfo(ctx context.Context, obj interface{}) (model.NewVehicleInfo, error) {
	var it model.NewVehicleInfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDataSort(ctx context.Context, obj interface{}) (model.VehicleDataSort, error) {
	var it model.VehicleDataSort
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["sort"]; !present {
		asMap["sort"] = "DESCENDING"
	}
	if _, present := asMap["sortBy"]; !present {
		asMap["sortBy"] = "created"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOSortDirection2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOSortableVehicleField2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortableVehicleField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDriverBindingFilter(ctx context.Context, obj interface{}) (model.VehicleDriverBindingFilter, error) {
	var it model.VehicleDriverBindingFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_binding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_binding"))
			it.IsBinding, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleInfoFilter(ctx context.Context, obj interface{}) (model.VehicleInfoFilter, error) {
	var it model.VehicleInfoFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "registerBetween":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registerBetween"))
			it.RegisterBetween, err = ec.unmarshalODateRange2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDateRange(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _TimeModel(ctx context.Context, sel ast.SelectionSet, obj model.TimeModel) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DriverInfo:
		return ec._DriverInfo(ctx, sel, &obj)
	case *model.DriverInfo:
		if obj == nil {
			return graphql.Null
		}
		return ec._DriverInfo(ctx, sel, obj)
	case model.DriverIdentity:
		return ec._DriverIdentity(ctx, sel, &obj)
	case *model.DriverIdentity:
		if obj == nil {
			return graphql.Null
		}
		return ec._DriverIdentity(ctx, sel, obj)
	case model.VehicleDriverBinding:
		return ec._VehicleDriverBinding(ctx, sel, &obj)
	case *model.VehicleDriverBinding:
		if obj == nil {
			return graphql.Null
		}
		return ec._VehicleDriverBinding(ctx, sel, obj)
	case model.VehicleInfo:
		return ec._VehicleInfo(ctx, sel, &obj)
	case *model.VehicleInfo:
		if obj == nil {
			return graphql.Null
		}
		return ec._VehicleInfo(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var businessScopeInfoImplementors = []string{"BusinessScopeInfo"}

func (ec *executionContext) _BusinessScopeInfo(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessScopeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessScopeInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessScopeInfo")
		case "business_scope":
			out.Values[i] = ec._BusinessScopeInfo_business_scope(ctx, field, obj)
		case "number":
			out.Values[i] = ec._BusinessScopeInfo_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtCountImplementors = []string{"DistrictCount"}

func (ec *executionContext) _DistrictCount(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictCount")
		case "district_name":
			out.Values[i] = ec._DistrictCount_district_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "business_scope_info_list":
			out.Values[i] = ec._DistrictCount_business_scope_info_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityImplementors = []string{"DriverIdentity", "TimeModel"}

func (ec *executionContext) _DriverIdentity(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentity")
		case "identity_id":
			out.Values[i] = ec._DriverIdentity_identity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_card_num":
			out.Values[i] = ec._DriverIdentity_id_card_num(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._DriverIdentity_id_card_birthday(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._DriverIdentity_id_card_sign_government(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._DriverIdentity_id_card_nation(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._DriverIdentity_id_card_start_date(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._DriverIdentity_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._DriverIdentity_id_card_front_pic(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._DriverIdentity_id_card_back_pic(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._DriverIdentity_id_card_address(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._DriverIdentity_driver_holding_id_photo(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._DriverIdentity_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._DriverIdentity_driver_signature(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentity_occupational_number(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._DriverIdentity_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._DriverIdentity_occupational_issuing_authority(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DriverIdentity_labor_contract(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._DriverIdentity_driver_license_pic(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._DriverIdentity_driver_license_issuing_authority(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._DriverIdentity_annual_review_date(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._DriverIdentity_renewal_date(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentity_accumulatived_points(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._DriverIdentity_sorting_date(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentity_quasi_driving_models(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._DriverIdentity_driver_license_province_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._DriverIdentity_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._DriverIdentity_driver_license_district_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentity_driver_license_status(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._DriverIdentity_driver_license_issue_date(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._DriverIdentity_is_delete(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._DriverIdentity_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._DriverIdentity_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._DriverIdentity_update_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_by":
			out.Values[i] = ec._DriverIdentity_update_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._DriverIdentity_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._DriverIdentity_delete_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoImplementors = []string{"DriverInfo", "TimeModel"}

func (ec *executionContext) _DriverInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfo")
		case "driver_id":
			out.Values[i] = ec._DriverInfo_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._DriverInfo_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DriverInfo_department_id(ctx, field, obj)
		case "driver_identity":
			out.Values[i] = ec._DriverInfo_driver_identity(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverInfo_driver_name(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DriverInfo_telephone(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfo_sex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "files_number":
			out.Values[i] = ec._DriverInfo_files_number(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DriverInfo_contact_address(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._DriverInfo_mailing_address(ctx, field, obj)
		case "is_submit":
			out.Values[i] = ec._DriverInfo_is_submit(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._DriverInfo_submit_content(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._DriverInfo_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._DriverInfo_submit_by(ctx, field, obj)
		case "is_manual_input":
			out.Values[i] = ec._DriverInfo_is_manual_input(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._DriverInfo_is_input(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._DriverInfo_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._DriverInfo_input_by(ctx, field, obj)
		case "is_check_data":
			out.Values[i] = ec._DriverInfo_is_check_data(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._DriverInfo_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._DriverInfo_check_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._DriverInfo_remark_in(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DriverInfo_update_time_in(ctx, field, obj)
		case "is_check_sms":
			out.Values[i] = ec._DriverInfo_is_check_sms(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._DriverInfo_is_black(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._DriverInfo_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._DriverInfo_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._DriverInfo_update_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_by":
			out.Values[i] = ec._DriverInfo_update_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._DriverInfo_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._DriverInfo_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._DriverInfo_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DriverInfo_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createVehicleInfo":
			out.Values[i] = ec._Mutation_createVehicleInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVehicleInfo":
			out.Values[i] = ec._Mutation_updateVehicleInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVehicleInfo":
			out.Values[i] = ec._Mutation_deleteVehicleInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDriverInfo":
			out.Values[i] = ec._Mutation_createDriverInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDriverInfo":
			out.Values[i] = ec._Mutation_updateDriverInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDriverInfo":
			out.Values[i] = ec._Mutation_deleteDriverInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createVehicleDriverBinding":
			out.Values[i] = ec._Mutation_createVehicleDriverBinding(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVehicleDriverBinding":
			out.Values[i] = ec._Mutation_updateVehicleDriverBinding(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVehicleDriverBinding":
			out.Values[i] = ec._Mutation_deleteVehicleDriverBinding(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getDistrictVehicleList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDistrictVehicleList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getVehicleInfoList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVehicleInfoList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDistrictDriverList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDistrictDriverList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDriverInfoList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDriverInfoList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getVehicleDriverBinding":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVehicleDriverBinding(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingImplementors = []string{"VehicleDriverBinding", "TimeModel"}

func (ec *executionContext) _VehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBinding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBinding")
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._VehicleDriverBinding_vehicle_driver_binding_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._VehicleDriverBinding_driver_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleDriverBinding_vehicle_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleDriverBinding_remarks(ctx, field, obj)
		case "lease_contract":
			out.Values[i] = ec._VehicleDriverBinding_lease_contract(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._VehicleDriverBinding_license_plate_number(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._VehicleDriverBinding_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._VehicleDriverBinding_license_plate_type(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._VehicleDriverBinding_driver_name(ctx, field, obj)
		case "is_binding":
			out.Values[i] = ec._VehicleDriverBinding_is_binding(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleDriverBinding_is_delete(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleDriverBinding_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._VehicleDriverBinding_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._VehicleDriverBinding_update_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_by":
			out.Values[i] = ec._VehicleDriverBinding_update_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._VehicleDriverBinding_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleDriverBinding_delete_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleInfoImplementors = []string{"VehicleInfo", "TimeModel"}

func (ec *executionContext) _VehicleInfo(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleInfo")
		case "vehicle_id":
			out.Values[i] = ec._VehicleInfo_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "license_plate_number":
			out.Values[i] = ec._VehicleInfo_license_plate_number(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._VehicleInfo_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._VehicleInfo_license_plate_type(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleInfo_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._VehicleInfo_enterprise_name(ctx, field, obj)
		case "district":
			out.Values[i] = ec._VehicleInfo_district(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._VehicleInfo_department_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._VehicleInfo_vehicle_identification_number(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._VehicleInfo_road_transport_license_number(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleInfo_vehicle_type(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._VehicleInfo_industry_category(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._VehicleInfo_heavy(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._VehicleInfo_seats(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._VehicleInfo_operating_type(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._VehicleInfo_operating_route(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleInfo_business_scope(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._VehicleInfo_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._VehicleInfo_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._VehicleInfo_vehicle_manager_id_card(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._VehicleInfo_owner(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._VehicleInfo_inspection_date(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._VehicleInfo_retirement_date(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._VehicleInfo_use_nature(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._VehicleInfo_vehicle_state(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._VehicleInfo_update_time_in(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._VehicleInfo_remark_in(ctx, field, obj)
		case "is_complete":
			out.Values[i] = ec._VehicleInfo_is_complete(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._VehicleInfo_driving_licensee_pic(ctx, field, obj)
		case "is_active":
			out.Values[i] = ec._VehicleInfo_is_active(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._VehicleInfo_is_input(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._VehicleInfo_car_rental_price(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._VehicleInfo_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._VehicleInfo_insurance_date(ctx, field, obj)
		case "vehicle_maintenances":
			out.Values[i] = ec._VehicleInfo_vehicle_maintenances(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._VehicleInfo_vehicle_displacement(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._VehicleInfo_vehicle_brand(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._VehicleInfo_quasi_driving_models(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._VehicleInfo_is_upload_province(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._VehicleInfo_operating_state(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._VehicleInfo_terminal_id(ctx, field, obj)
		case "is_apply_install_terminal":
			out.Values[i] = ec._VehicleInfo_is_apply_install_terminal(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._VehicleInfo_check_state(ctx, field, obj)
		case "is_import":
			out.Values[i] = ec._VehicleInfo_is_import(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._VehicleInfo_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._VehicleInfo_record_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleInfo_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleInfo_remarks(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleInfo_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._VehicleInfo_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._VehicleInfo_update_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_by":
			out.Values[i] = ec._VehicleInfo_update_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._VehicleInfo_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleInfo_delete_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleMaintenanceImplementors = []string{"VehicleMaintenance"}

func (ec *executionContext) _VehicleMaintenance(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleMaintenance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleMaintenanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleMaintenance")
		case "maintenance_date":
			out.Values[i] = ec._VehicleMaintenance_maintenance_date(ctx, field, obj)
		case "maintenance_kilometers":
			out.Values[i] = ec._VehicleMaintenance_maintenance_kilometers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBusinessScopeInfo2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐBusinessScopeInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BusinessScopeInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessScopeInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐBusinessScopeInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessScopeInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐBusinessScopeInfo(ctx context.Context, sel ast.SelectionSet, v *model.BusinessScopeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessScopeInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNDistrictCount2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDistrictCountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DistrictCount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDistrictCount2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDistrictCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDistrictCount2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDistrictCount(ctx context.Context, sel ast.SelectionSet, v *model.DistrictCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DistrictCount(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v model.DriverInfo) graphql.Marshaler {
	return ec._DriverInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverInfo2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNewDriverInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewDriverInfo(ctx context.Context, v interface{}) (model.NewDriverInfo, error) {
	res, err := ec.unmarshalInputNewDriverInfo(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewVehicleDriverBinding2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleDriverBinding(ctx context.Context, v interface{}) (model.NewVehicleDriverBinding, error) {
	res, err := ec.unmarshalInputNewVehicleDriverBinding(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewVehicleInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐNewVehicleInfo(ctx context.Context, v interface{}) (model.NewVehicleInfo, error) {
	res, err := ec.unmarshalInputNewVehicleInfo(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx context.Context, v interface{}) ([]*graphql.Upload, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*graphql.Upload, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUploadᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql.Upload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleDriverBinding2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBinding) graphql.Marshaler {
	return ec._VehicleDriverBinding(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleDriverBinding2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleDriverBinding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleDriverBinding2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleDriverBinding2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBinding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleDriverBinding(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleInfo2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfo(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfo) graphql.Marshaler {
	return ec._VehicleInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleInfo2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleInfo2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleInfo(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalODataPage2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDataPage(ctx context.Context, v interface{}) (*model.DataPage, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataPage(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateRange2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDateRange(ctx context.Context, v interface{}) (*model.DateRange, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateRange(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverDataSort2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverDataSort(ctx context.Context, v interface{}) (*model.DriverDataSort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverDataSort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverIdentity2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverIdentity(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentity(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverInfoFilter2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐDriverInfoFilter(ctx context.Context, v interface{}) (*model.DriverInfoFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverInfoFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOSortDirection2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortDirection(ctx context.Context, v interface{}) (*model.SortDirection, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SortDirection)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortDirection2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v *model.SortDirection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSortableDriverField2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortableDriverField(ctx context.Context, v interface{}) (*model.SortableDriverField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SortableDriverField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortableDriverField2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortableDriverField(ctx context.Context, sel ast.SelectionSet, v *model.SortableDriverField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSortableVehicleField2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortableVehicleField(ctx context.Context, v interface{}) (*model.SortableVehicleField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SortableVehicleField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortableVehicleField2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐSortableVehicleField(ctx context.Context, sel ast.SelectionSet, v *model.SortableVehicleField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOVehicleDataSort2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleDataSort(ctx context.Context, v interface{}) (*model.VehicleDataSort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleDataSort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleInfoFilter2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleInfoFilter(ctx context.Context, v interface{}) (*model.VehicleInfoFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleInfoFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleMaintenance2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleMaintenance(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleMaintenance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVehicleMaintenance2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleMaintenance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVehicleMaintenance2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervisionᚋgraphᚋmodelᚐVehicleMaintenance(ctx context.Context, sel ast.SelectionSet, v *model.VehicleMaintenance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleMaintenance(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
